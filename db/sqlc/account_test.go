package db

import (
	"context"
	"database/sql"
	"github.com/elmas23/simplebank/db/utils"
	"github.com/stretchr/testify/require"
	"testing"
	"time"
)

// createRandomAccount will be used for testing all the other method
// since we first need to create an account
// it is different from TestCreateAccount since we do not want other tests
// to rely on another test
// it does not have the Test prefix; so it won't be run as part of the unit test
func createRandomAccount(t *testing.T) Account {
	// Since our methods takes a CreateAccountParams as parameter
	// We are setting some mock value to it that we can use to test our methods
	arg := CreateAccountParams{
		Owner:    utils.GenerateOwner(),
		Balance:  utils.GenerateBalance(),
		Currency: utils.GenerateCurrency(),
	}
	// Now we make the call to the CreateAccount method usinf the testQueries variable
	// that we created in main test
	account, err := testQueries.CreateAccount(context.Background(), arg)
	// Here we are going to test that this operation is done successfully
	require.NoError(t, err) // Here error must be nil
	// Then we can check that the account is no empty object
	// we can check that the balance, owner, and  currency matches our mock arguments
	require.Equal(t, account.Owner, arg.Owner)
	require.Equal(t, account.Balance, arg.Balance)
	require.Equal(t, account.Currency, arg.Currency)

	// we also want to check that account id is generated by postgres directly
	require.NotZero(t, account.ID)
	// we also need to check that the timestamp is set correctly
	require.NotZero(t, account.CreatedAt)

	return account
}

// Now that we set the main test we cn create individual test
func TestCreateAccount(t *testing.T) {
	createRandomAccount(t)
}

func TestGetAccount(t *testing.T) {
	// we first an account
	account1 := createRandomAccount(t)
	// We used the ID of the first account to get a second account
	// ideally account1 == account2
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)

	// so we first check that there is no error
	require.NoError(t, err)
	// we check that account2 is not empty
	require.NotEmpty(t, account2)
	// We then check if account2 matches accounts 1
	require.Equal(t, account1.ID, account2.ID)
	require.Equal(t, account1.Owner, account2.Owner)
	require.Equal(t, account1.Balance, account2.Balance)
	require.Equal(t, account1.Currency, account2.Currency)

	// For the time the account was created we can check the
	// timestamps are different by at most some delta function
	require.WithinDuration(t, account1.CreatedAt, account2.CreatedAt, time.Second)
}

func TestUpdateAccount(t *testing.T) {
	account1 := createRandomAccount(t)

	// Since our methods takes a UpdateAccountParams as parameter
	// We are setting some mock value to it that we can use to test our methods
	arg := UpdateAccountParams{
		ID:      account1.ID,
		Balance: utils.GenerateBalance(),
	}

	account2, err := testQueries.UpdateAccount(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, account2)
	require.Equal(t, account1.ID, account2.ID)
	require.Equal(t, account1.Owner, account2.Owner)
	// We check that the balance has been updated
	require.Equal(t, account2.Balance, arg.Balance)
	require.Equal(t, account1.Currency, account2.Currency)

	// For the time the account was created we can check the
	// timestamps are different by at most some delta function
	require.WithinDuration(t, account1.CreatedAt, account2.CreatedAt, time.Second)

}

func TestDeleteAccount(t *testing.T) {
	account1 := createRandomAccount(t)

	err := testQueries.DeleteAccount(context.Background(), account1.ID)
	// We should check that there is no error
	require.NoError(t, err)

	// Then we try to get the account , and normally it should be empty
	account2, err := testQueries.GetAccount(context.Background(), account1.ID)
	// Here an error should happen since the acount is deleted
	require.Error(t, err)
	// We check further that the error is specifically an ErrNoRows.Error()
	require.EqualError(t, err, sql.ErrNoRows.Error())
	// we should also check that account2 is empty
	require.Empty(t, account2)
}

func TestListAccounts(t *testing.T) {
	for i := 0; i < 10; i++ {
		createRandomAccount(t)
	}

	arg := ListAccountsParams{
		Limit:  5,
		Offset: 5,
	}

	accounts, err := testQueries.ListAccounts(context.Background(), arg)
	// we check that there is no error
	require.NoError(t, err)
	// Since the limit is 5 we should check that the return list is of length 5
	require.Len(t, accounts, 5)

	// We then run through each account
	// and check that they are not empty
	for _, account := range accounts {
		require.NotEmpty(t, account)
	}
}
